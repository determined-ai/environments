# Use the latest 2.1 version of CircleCI pipeline process engine. See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

orbs:
  gcp-cli: circleci/gcp-cli@1.8.4

upstream-feature-branch: &upstream-feature-branch
  branches:
    ignore:
      - /pull\/.*/
      - /release-.*/
      - master

commands:
  login-docker:
    parameters:
      repository:
        type: string
        default: ""
      username:
        type: string
      password:
        type: string
    steps:
      - run: echo "<<parameters.password>>" | docker login <<parameters.repository>> -u "<<parameters.username>>" --password-stdin
  activate-service-account:
    steps:
      - run:
          name: Activate GCP service account
          command: |
              GOOGLE_APPLICATION_CREDENTIALS=${HOME}/gcloud-service-key.json
              echo ${GCLOUD_SERVICE_KEY} > ${GOOGLE_APPLICATION_CREDENTIALS}
              echo "export GOOGLE_APPLICATION_CREDENTIALS=\"${GOOGLE_APPLICATION_CREDENTIALS}\"" >> $BASH_ENV
              gcloud auth activate-service-account --key-file=${GOOGLE_APPLICATION_CREDENTIALS}

              gcloud --quiet config set project ${GOOGLE_PROJECT_ID}
              gcloud --quiet config set compute/zone ${GOOGLE_COMPUTE_ZONE}
  install-packer:
    steps:
      - run:
          name: Install Packer
          command: |
              cd /tmp
              wget https://releases.hashicorp.com/packer/1.4.5/packer_1.4.5_linux_amd64.zip
              sudo unzip packer_1.4.5_linux_amd64.zip -d /usr/local/bin
  install-ansible:
    steps:
      - run:
          name: Upgrade Pip # Required to get pre-compiled cryptography wheel
          command: pip install --upgrade pip
      - run:
          name: Install Ansible CLI
          command: sudo apt-add-repository --yes --update ppa:ansible/ansible && sudo apt install ansible
      - run:
          name: Install Ansible library
          command: pip install ansible

  install-docker:
    steps:
      - run: sudo apt-get update && sudo apt-get install -y docker-ce docker-ce-cli containerd.io
      - run: sudo systemctl restart docker



jobs:
  build-and-publish-docker:
    parameters:
      image-type:
        type: string
      dev-mode:
        type: boolean
        default: false
      with-mpi:
        type: integer
        default: 0
    machine:
      image: ubuntu-2004:2022.04.2
    resource_class: xlarge
    steps:
      - checkout
      - install-docker
      - login-docker:
          username: ${DOCKER_USER}
          password: ${DOCKER_PASS}
      - unless:
          condition: <<parameters.dev-mode>>
          steps:
            - login-docker:
                repository: nvcr.io
                username: ${NGC_API_USERNAME}
                password: ${NGC_API_KEY}
            - run: make build-<<parameters.image-type>> WITH_MPI=<<parameters.with-mpi>>
            - run: make publish-<<parameters.image-type>> WITH_MPI=<<parameters.with-mpi>>
      - when:
          condition: <<parameters.dev-mode>>
          steps:
            - run: make build-<<parameters.image-type>> NGC_PUBLISH= REGISTRY_REPO=environments-dev WITH_MPI=<<parameters.with-mpi>>
            - run: make publish-<<parameters.image-type>> NGC_PUBLISH= REGISTRY_REPO=environments-dev WITH_MPI=<<parameters.with-mpi>>
      - store_artifacts:
          path: /tmp/artifacts

  publish-cloud-images:
    parameters:
      dev-mode:
        type: boolean
        default: false
    docker:
      - image: cimg/python:3.8
    steps:
      - checkout
      - install-packer
      - gcp-cli/install
      - activate-service-account
      - install-ansible
      - unless:
          condition: <<parameters.dev-mode>>
          steps:
            - run:
                no_output_timeout: 90m
                command: make publish-cloud-images PACKER_FLAGS="-force"
      - when:
          condition: <<parameters.dev-mode>>
          steps:
            - run:
                no_output_timeout: 90m
                command: make publish-cloud-images PACKER_FLAGS="-force" NGC_PUBLISH= REGISTRY_REPO=environments-dev
      - store_artifacts:
          path: /tmp/artifacts

  test-job:
    docker:
      - image: cimg/python:3.8
    steps:
      - checkout
      - run: echo hello


workflows:
  version: 2
  publish:
    jobs:
      - build-and-publish-docker:
          context: determined-production
          filters:
            branches:
              only: master
          matrix:
            parameters:
              with-mpi: [0, 1]
              image-type:
                  #- tf1-cpu
                - tf2-cpu
                - tf28-cpu
                - pt-cpu
                  #- tf1-gpu
                  #- tf2-gpu
                  #- tf28-gpu
                  #- pt-gpu
                  #- pytorch10-tf27-rocm50
                  #- deepspeed-gpu
                  #- gpt-neox-deepspeed-gpu
                  #exclude:
                  #- with-mpi: 1
                  #image-type: pytorch10-tf27-rocm50
                  #- with-mpi: 1
                  #image-type: deepspeed-gpu
                  #- with-mpi: 1
                  #image-type: gpt-neox-deepspeed-gpu

      - publish-cloud-images:
          context: determined-production
          filters:
            branches:
              only: master
          requires:
            - build-and-publish-docker

  publish-dev:
    jobs:
      - request-publish-dev-docker:
          type: approval
          filters: *upstream-feature-branch

      - request-publish-dev-cloud:
          type: approval
          filters: *upstream-feature-branch

      - build-and-publish-docker:
          name: build-and-publish-docker-<<matrix.image-type>>-<<matrix.with-mpi>>-dev
          context: determined-production
          filters: *upstream-feature-branch
          requires:
            - request-publish-dev-docker
          matrix:
            alias: build-docker-all
            parameters:
              dev-mode: [true]
              with-mpi: [0, 1]
              image-type:
                  #- tf1-cpu
                - tf2-cpu
                - tf28-cpu
                - pt-cpu
                  #- tf1-gpu
                  #- tf2-gpu
                  #- tf28-gpu
                  #- pt-gpu
                  #- pytorch10-tf27-rocm50
                  #- deepspeed-gpu
                  #- gpt-neox-deepspeed-gpu
                  #exclude:
                  #- dev-mode: true
                  #with-mpi: 1
                  #image-type: pytorch10-tf27-rocm50
                  #- dev-mode: true
                  #with-mpi: 1
                  #image-type: deepspeed-gpu
                  #- dev-mode: true
                  #with-mpi: 1
                  #image-type: gpt-neox-deepspeed-gpu

      - publish-cloud-images:
          name: publish-cloud-images-dev
          context: determined-production
          filters: *upstream-feature-branch
          requires:
            - build-docker-all
            - request-publish-dev-cloud
          dev-mode: true
